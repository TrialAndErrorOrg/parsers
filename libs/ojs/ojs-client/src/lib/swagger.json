{
  "swagger": "2.0",
  "info": {
    "version": "3.3",
    "title": "REST API - OJS",
    "description": "This guide documents the REST API endpoints which can be accessed with this version of [Open Journal Systems](https://pkp.sfu.ca/ojs/). It is a technical reference for software developers who wish to build custom interactions with the platform.\n\nPlease consult the [REST API Usage Guide](/dev/api) for an introduction to using the API or the [Developer Documentation Hub](/dev) for technical documentation on the software.\n\n**Breaking changes since v3.2**\n* Major changes were made to how galleys are fetched and new endpoints were added for submission files. See the documentation for full details.",
    "contact": {
      "name": "Public Knowledge Project",
      "url": "https://docs.pkp.sfu.ca"
    },
    "x-logo": {
      "url": "/img/docs-logo.png",
      "altText": "PKP Developer Docs"
    }
  },
  "produces": ["application/json"],
  "tags": [
    {
      "name": "Submissions"
    },
    {
      "name": "Submissions / Files"
    },
    {
      "name": "Submissions / Participants"
    },
    {
      "name": "Submissions / Publications"
    },
    {
      "name": "Submissions / Publications / Contributors"
    },
    {
      "name": "Issues"
    },
    {
      "name": "Users",
      "description": "Only admins, journal editors, and subeditors can access these endpoints."
    },
    {
      "name": "Contexts",
      "description": "Only admins and journal managers can access these endpoints."
    },
    {
      "name": "Site",
      "description": "Only admins can access these endpoints, which should be accessed using `_` instead of the journal path."
    },
    {
      "name": "Announcements",
      "description": "Only admins and journal managers can access these endpoints."
    },
    {
      "name": "Email Templates",
      "description": "Only admins and journal managers can access these endpoints."
    },
    {
      "name": "Stats / Editorial",
      "description": "Only admins and journal managers can access these endpoints."
    },
    {
      "name": "Stats / Publications",
      "description": "Only admins and journal managers can access these endpoints."
    },
    {
      "name": "Stats / Users",
      "description": "Only admins and journal managers can access these endpoints."
    },
    {
      "name": "Vocabs",
      "description": "Handle controlled vocabularies like keywords and subjects. Only admins, journal managers, subeditors, assistants and authors can access these endpoints."
    },
    {
      "name": "Temporary Files",
      "description": "A special endpoint to be used for handling file uploads. See the [API Usage Guide](/dev/api) for more information."
    },
    {
      "name": "Backend",
      "description": "Private endpoints for OJS's UI. These endpoints will be less stable between versions. We discourage their use in third-party plugins or applications."
    }
  ],
  "definitions": {
    "Announcement": "announcement",
    "Author": "author",
    "Context": "context",
    "Doi": "doi",
    "ErrorResponse": {
      "type": "object",
      "description": "A response object that will be returned when the request could not be fulfilled.",
      "properties": {
        "error": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "EmailTemplate": "emailTemplate",
    "Galley": "galley",
    "InvalidParametersResponse": {
      "type": "object",
      "description": "A response object that will be returned when there are validation errors for the request parameters. Typically used with forms.",
      "example": {
        "name": ["You must provide a name to create a new user."],
        "roles": ["You must assign the user to one or more roles."]
      }
    },
    "Issue": "issue",
    "LocaleObject": {
      "type": "object",
      "description": "Key/value pairs containing data stored by locale key.",
      "example": {
        "en_US": "Filename",
        "fr_CA": "Nom de fichier"
      }
    },
    "Publication": "publication",
    "PublicationStats": {
      "type": "object",
      "description": "The total abstract and galley views for a published submission.",
      "properties": {
        "abstractViews": {
          "type": "integer"
        },
        "galleyViews": {
          "type": "integer"
        },
        "pdfViews": {
          "type": "integer"
        },
        "htmlViews": {
          "type": "integer"
        },
        "otherViews": {
          "type": "integer"
        },
        "publication": {
          "type": "object",
          "properties": {
            "_href": {
              "type": "string"
            },
            "fullTitle": {
              "$ref": "#/definitions/LocaleObject"
            },
            "id": {
              "type": "integer"
            },
            "shortAuthorString": {
              "type": "string"
            },
            "urlPublished": {
              "type": "string"
            },
            "urlWorkflow": {
              "type": "string"
            }
          }
        }
      }
    },
    "Contributor": "author",
    "ReviewRound": "reviewRound",
    "ReviewerSummary": {
      "type": "object",
      "description": "A special representation of a User assigned to a reviewer group. This model presents specific details about review activity.",
      "properties": {
        "_href": {
          "type": "string"
        },
        "affiliation": {
          "$ref": "#/definitions/LocaleObject"
        },
        "averageReviewCompletionDays": {
          "type": "integer"
        },
        "dateLastReviewAssignment": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "fullName": {
          "type": "string"
        },
        "gossip": {
          "$ref": "#/definitions/LocaleObject"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroup"
          }
        },
        "id": {
          "type": "integer"
        },
        "interests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInterest"
          }
        },
        "reviewsActive": {
          "type": "integer"
        },
        "reviewsCompleted": {
          "type": "integer"
        },
        "reviewsCancelled": {
          "type": "integer"
        },
        "reviewsDeclined": {
          "type": "integer"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "Section": "section",
    "Site": "site",
    "Submission": "submission",
    "SubmissionFile": "submissionFile",
    "ThemeOptions": {
      "type": "object",
      "description": "A theme with values for any of its theme options. The theme is provided in the `themePluginPath` key. Other keys may or may not exist depending on what options have been defined by that theme.",
      "properties": {
        "themePluginPath": {
          "type": "string"
        },
        "...": {
          "type": "string"
        }
      }
    },
    "TimelineInterval": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "value": {
          "type": "integer"
        }
      }
    },
    "User": "user",
    "UserGroup": "userGroup",
    "UserInterest": {
      "type": "object",
      "description": "A user's review interests.",
      "properties": {
        "id": {
          "type": "integer"
        },
        "interest": {
          "type": "string"
        }
      }
    }
  },
  "paths": {
    "/submissions": {
      "get": {
        "tags": ["Submissions"],
        "summary": "Get a list of submissions.",
        "description": "See `/submissions/{submissionId}` for notes about submission properties.",
        "parameters": [
          {
            "name": "status",
            "description": "Filter results by one or more submission statuses. Must match the value of one of the `PKPSubmission::STATUS_QUEUED`, `PKPSubmission::STATUS_SCHEDULED`, `PKPSubmission::STATUS_PUBLISHED` or `PKPSubmission::STATUS_DECLINED` constants.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "enum": [1, 3, 4, 5]
            }
          },
          {
            "name": "assignedTo",
            "description": "Filter results by those assigned to one or more user ids. All users except managers and admins are automatically restricted to assigned submissions and do not need to pass this parameter.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "description": "How many results to return in a single request. Max is `100`.",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20
          },
          {
            "name": "offset",
            "description": "Offset the results returned. Use this to receive subsequent pages of requests. A `count` of `10` and `offset` of `15` will return results `15` to `25`.",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "orderBy",
            "description": "Order the results returned.",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "dateSubmitted",
            "enum": [
              "datePublished",
              "dateSubmitted",
              "lastActivity",
              "lastModified",
              "sequence",
              "title"
            ]
          },
          {
            "name": "orderDirection",
            "description": "Return the results in ascending or descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "DESC",
            "enum": ["ASC", "DESC"]
          },
          {
            "name": "isIncomplete",
            "description": "Filter the results by those for which the author has not yet completed the submission process.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isOverdue",
            "description": "Filter the results by those for which a reviewer has missed a deadline.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "daysInactive",
            "description": "Filter the results by those which have not had activity for the last X days.",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sectionIds",
            "description": "Filter the results by those with one or more publications assigned to a section.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "issueIds",
            "description": "Filter the results by those with one or more publications assigned to an issue.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "searchPhrase",
            "description": "Filter the results by a search phrase matched against the title and authors.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "List of requested submissions.",
            "schema": {
              "type": "object",
              "properties": {
                "itemsMax": {
                  "type": "integer"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Submission"
                  }
                }
              }
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to access submissions assigned to the user requested in the `assignedTo` parameter.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Submissions"],
        "summary": "Create a new submission.",
        "parameters": [
          {
            "description": "Details about the submission that should be created.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SubmissionEditable"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Details of the submission that was just added.",
            "schema": {
              "$ref": "#/definitions/Submission"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          }
        }
      }
    },
    "/submissions/{submissionId}": {
      "get": {
        "tags": ["Submissions"],
        "summary": "Get a submission by ID.",
        "description": "* Unpublished submissions are only returned for assigned participants, editors and admins.\n* `abstract` includes HTML markup.\n* `pages` is usually a `string`. But in some cases it may return an array of arrays. Each array contains two items: the start and end page. Example: `[[25, 31], [45, 62]]`.\n* `submissionProgress` will be > 0 if the submission is incomplete.\n* `stages`, `reviewRounds` and `reviewAssignments` should only be returned for participants assigned to the submission.\n* `reviewAssignments` should only expose user-identifying information for editors and admins.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The submission details.",
            "schema": {
              "$ref": "#/definitions/Submission"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to access this submissions.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The submission could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": ["Submissions"],
        "summary": "Edit a submission.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The details about the submission that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SubmissionEditable"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The submission that was just edited with the new values after the update has occurred.",
            "schema": {
              "$ref": "#/definitions/Submission"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "This error indicates one of the following:\n* You are not allowed to edit a submission from the site-wide endpoint. You must use a context (journal/press/server) endpoint.\n* You are not allowed to change the context (journal/press/server) of a submission.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The submission could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["Submissions"],
        "summary": "Delete a submission.",
        "description": "Only journal managers and subeditors can make a request to this endpoint.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Details of the deleted submission.",
            "schema": {
              "$ref": "#/definitions/Submission"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You are not allowed to delete this submission.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The submission could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/submissions/{submissionId}/files": {
      "get": {
        "tags": ["Submissions / Files"],
        "summary": "Get a submission's files.",
        "description": "This will return all of a submission's files that the user is allowed to access, except review attachments and discussion files. A user is allowed to access different file stages depending on their stage assignment.\n* Managers, subeditors and assistants can access all file stages if they are assigned to the matching workflow stage. For example, an assistant assigned to the copyediting stage can access files in `SUBMISSION_FILE_COPYEDIT` and `SUBMISSION_FILE_FINAL`.\n* Authors are restricted to the `SUBMISSION_FILE_SUBMISSION`, `SUBMISSION_FILE_REVIEW_REVISION`, `SUBMISSION_FILE_COPYEDIT` and `SUBMISSION_FILE_PROOF` file stages. For example, an author with access to the copyediting stage will have access to `SUBMISSION_FILE_COPYEDIT` (copyedited files) but not `SUBMISSION_FILE_FINAL` (draft files).\n* Reviewers and readers are not allowed to access this endpoint.\n* Managers who are not assigned to the submission are allowed to access all file stages as though they are assigned to every workflow stage.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "fileStages",
            "description": "Filter results by those submission files assigned to one or more file stage. One of the `SUBMISSION_FILE_` constants.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "reviewRoundIds",
            "description": "Filter results by those submission files assigned to one or more review rounds.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success.",
            "description": "An array of the requested submission files.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubmissionFileSummary"
              }
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to view the requested files.\n\n|Error Code|Description|\n|---|---|\n|`api.403.unauthorized`|You are not allowed to access files for this submission.|\n|`api.submissionFiles.403.unauthorizedFileStageId`|You are not allowed to access files in one or more of the `fileStages` requested.|\n|`api.submissionFiles.403.unauthorizedReviewRound`|You are not allowed to access files in one or more of the `reviewRoundIds` requested.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Submissions / Files"],
        "summary": "Create a new submission file.",
        "description": "A user is allowed to upload to different file stages depending on their stage assignments. See the description for `GET /submission/{submissionId}/files` above. Once a submission has been completed, authors are no longer allowed to upload to `SUBMISSION_FILE_SUBMISSION`. Authors are not allowed to upload to `SUBMISSION_FILE_REVIEW_REVISION` until revisions have been requested.",
        "consumes": "multipart/form-data",
        "parameters": [
          {
            "description": "Details about the submission file that should be created.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SubmissionFileEditable"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The new submission file.",
            "schema": {
              "$ref": "#/definitions/SubmissionFile"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "There was an error when uploading the file or the values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You are not allowed to upload a file to the specified file stage of this submission.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/submissions/{submissionId}/files/{submissionFileId}": {
      "get": {
        "tags": ["Submissions / Files"],
        "summary": "Get a submission file.",
        "description": "You must pass the correct `stageId` when requesting a file.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "submissionFileId",
            "in": "path",
            "description": "Submission File ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "stageId",
            "in": "query",
            "description": "The workflow stage id of the requested file. For example, `WORKFLOW_STAGE_ID_PRODUCTION`.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Details of the submission file.",
            "schema": {
              "$ref": "#/definitions/SubmissionFile"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You are not allowed to access the requested file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": ["Submissions / Files"],
        "summary": "Edit a submission file.",
        "description": "You must pass the correct `stageId` when editing a file.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "submissionFileId",
            "in": "path",
            "description": "Submission File ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "stageId",
            "in": "query",
            "description": "The workflow stage id of the file to be edited. For example, `WORKFLOW_STAGE_ID_PRODUCTION`.",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The details about the submission file that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SubmissionFileEditable"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The submission file that was just edited with the new values after the update has occurred.",
            "schema": {
              "$ref": "#/definitions/SubmissionFile"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "There was an error when uploading the file or the values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You are not allowed to edit the requested file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["Submissions / Files"],
        "summary": "Delete a submission file.",
        "description": "You must pass the correct `stageId` when deleting a file.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "submissionFileId",
            "in": "path",
            "description": "Submission File ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "stageId",
            "in": "query",
            "description": "The workflow stage id of the file to be edited. For example, `WORKFLOW_STAGE_ID_PRODUCTION`.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The submission file that was just deleted.",
            "schema": {
              "$ref": "#/definitions/SubmissionFile"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You are not allowed to delete the requested file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/submissions/{submissionId}/participants": {
      "get": {
        "tags": ["Submissions / Participants"],
        "summary": "Get assigned participants.",
        "description": "Get the participants assigned to a submisssion.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "List of users assigned to a submission",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserSummary"
              }
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested submission could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/submissions/{submissionId}/participants/{stageId}": {
      "get": {
        "tags": ["Submissions / Participants"],
        "summary": "Get assigned participants by stage.",
        "description": "Get all participants assigned to a submission for a specific workflow stage, such as the review or copyediting stage.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "stageId",
            "in": "path",
            "description": "Stage ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "List of users assigned to the requested stage of the requested submission",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserSummary"
              }
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested submission could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/submissions/{submissionId}/publications": {
      "get": {
        "tags": ["Submissions / Publications"],
        "summary": "Get a submission's publications.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "List of publications for this submission.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Publication"
              }
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested submission could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Submissions / Publications"],
        "summary": "Create a publication.",
        "description": "Create a new publication for a submission.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "publicationId",
            "in": "path",
            "description": "Publication ID",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Details about the publication that should be created.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PublicationEditable"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Details of the publication that was just added.",
            "schema": {
              "$ref": "#/definitions/Publication"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          }
        }
      }
    },
    "/submissions/{submissionId}/publications/{publicationId}": {
      "get": {
        "tags": ["Submissions / Publications"],
        "summary": "Get a publication.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "publicationId",
            "in": "path",
            "description": "Publication ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The publication details",
            "schema": {
              "$ref": "#/definitions/Publication"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested submission or publication could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": ["Submissions / Publications"],
        "summary": "Edit a publication.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "publicationId",
            "in": "path",
            "description": "Publication ID",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The details about the publication that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PublicationEditable"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The publication that was just edited with the new values after the update has occurred.",
            "schema": {
              "$ref": "#/definitions/Publication"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "This error indicates one of the following:\n* The publication you want to edit does not belong to this submission.\n* This publication is published and can not be edited. You must create and publish a new version.\n* You do not have permission to edit this publication.\n* You are not allowed to modify the `status` of a publication. You must use the `/submissions/{submissionId}/publications/{publicationId}/publish` and `.../unpublish` endpoints to modify the status of a publication.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The publication could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["Submissions / Publications"],
        "summary": "Delete a publication.",
        "description": "Only journal managers and subeditors can make a request to this endpoint.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "publicationId",
            "in": "path",
            "description": "Publication ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The publication that was just deleted.",
            "schema": {
              "$ref": "#/definitions/Publication"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "This may mean one of the following:\n* You are not allowed to delete this publication.\n* The publication does not belong to this submission.\n* This publication is published and can not be deleted.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The submission could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/submissions/{submissionId}/publications/{publicationId}/version": {
      "post": {
        "tags": ["Submissions / Publications"],
        "summary": "Create a new version of a publication.",
        "description": "Duplicate a publication, including author and galley records, in order to create a new version of a publication that can be edited.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "publicationId",
            "in": "path",
            "description": "Publication ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Details of the new publication that was created.",
            "schema": {
              "$ref": "#/definitions/Publication"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "The publication you want to version does not belong to this submission.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The publication could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/submissions/{submissionId}/publications/{publicationId}/publish": {
      "put": {
        "tags": ["Submissions / Publications"],
        "summary": "Publish a publication.",
        "description": "If the publication is assigned to an issue that is not yet published, it will be scheduled for publication and the `status` will be set to `PKPSubmission::STATUS_SCHEDULED`. If the issue is already published, it will be published immediately and the `status` will be set to `PKPSubmission::STATUS_PUBLISHED`.\n\nThe publication will be validated against any publishing requirements before it is published and a `400` response will be returned if it fails validation.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "publicationId",
            "in": "path",
            "description": "Publication ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Details of the publication that was just published.",
            "schema": {
              "$ref": "#/definitions/Publication"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "One or more publication requirements have not been met.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "A 403 response means that the publication you want to version does not belong to this submission or that the publication is already published.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The publication could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/submissions/{submissionId}/publications/{publicationId}/unpublish": {
      "put": {
        "tags": ["Submissions / Publications"],
        "summary": "Unpublish a publication.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "publicationId",
            "in": "path",
            "description": "Publication ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Details of the publication that was just unpublished.",
            "schema": {
              "$ref": "#/definitions/Publication"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "A 403 response means that the publication you want to version does not belong to this submission or that the publication is already unpublished.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The publication could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/submissions/{submissionId}/publications/{publicationId}/contributors": {
      "get": {
        "tags": ["Submissions / Publications / Contributors"],
        "summary": "Get a publication's contributors.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "publicationId",
            "in": "path",
            "description": "Publication ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "List of contributors for this publication.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contributor"
              }
            }
          },
          "404": {
            "x-summary": "Publication Not Found",
            "description": "The requested publication could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "x-summary": "Publication invalid",
            "description": "The requested publication is not part of the requested submission.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Submissions / Publications / Contributors"],
        "summary": "Create a contributor.",
        "description": "Create a new contributor for a publication.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "publicationId",
            "in": "path",
            "description": "Publication ID",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Details about the contributor that should be created.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ContributorEditable"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Details of the contributor that was just added.",
            "schema": {
              "$ref": "#/definitions/Contributor"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          },
          "404": {
            "x-summary": "Publication Not Found",
            "description": "The requested publication could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "x-summary": "Publication invalid",
            "description": "The requested publication is not part of the requested submission. It could be also because the publication is not editable by the requested user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/submissions/{submissionId}/publications/{publicationId}/contributors/{contributorId}": {
      "get": {
        "tags": ["Submissions / Publications / Contributors"],
        "summary": "Get a contributor.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "publicationId",
            "in": "path",
            "description": "Publication ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "contributorId",
            "in": "path",
            "description": "Contributor ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The contributor details",
            "schema": {
              "$ref": "#/definitions/Contributor"
            }
          },
          "403": {
            "x-summary": "Publication invalid",
            "description": "The requested publication is not part of the requested submission. It could be also because the publication is not editable by the requested user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested submission or publication or author could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": ["Submissions / Publications / Contributors"],
        "summary": "Edit a Contributor.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "publicationId",
            "in": "path",
            "description": "Publication ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "contributorId",
            "in": "path",
            "description": "Contributor ID",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The details about the contributor that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ContributorEditable"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The contributor that was just edited with the new values after the update has occurred.",
            "schema": {
              "$ref": "#/definitions/Contributor"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "This error indicates one of the following:\n* This contributor is assigned to a publication that does not belong to this submission.\n* This contributor is assigned to a publication that has already been published. You must create a new version of the publication to modify contributor details.\n* You do not have permission to edit contributors for this publication.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested submission or publication or author could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["Submissions / Publications / Contributors"],
        "summary": "Delete a contributor.",
        "description": "Only journal managers and subeditors can make a request to this endpoint.",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "publicationId",
            "in": "path",
            "description": "Publication ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "contributorId",
            "in": "path",
            "description": "Contributor ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The contributor that was just deleted.",
            "schema": {
              "$ref": "#/definitions/Contributor"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "This may mean one of the following:\n* You are not allowed to edit the contributors for this publication.\n* This contributor is assigned to a publication that is not part of the requested submission.\n* This contributor is assigned to a published publication and can not be edited.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested submission or publication or author could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/submissions/{submissionId}/publications/{publicationId}/contributors/saveOrder": {
      "put": {
        "tags": ["Submissions / Publications / Contributors"],
        "summary": "Reorder publication's contributors",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "publicationId",
            "in": "path",
            "description": "Publication ID",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The 'sortedAuthors' param is an array containing the new order of the contributors for the given publication",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contributor"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Details of the publication that it's contributors were just reordered.",
            "schema": {
              "$ref": "#/definitions/Publication"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "This may mean one of the following:\n* You are not allowed to edit the contributors for this publication.\n* This contributor is assigned to a publication that is not part of the requested submission.\n* This contributor is assigned to a published publication and can not be edited.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The publication could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/issues": {
      "get": {
        "tags": ["Issues"],
        "summary": "Get a list of issues.",
        "description": "Results are eordered by `datePublished`.",
        "parameters": [
          {
            "name": "count",
            "description": "How many results to return in a single request. Max is `100`.",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20
          },
          {
            "name": "offset",
            "description": "Offset the results returned. Use this to receive subsequent pages of requests. A `count` of `10` and `offset` of `15` will return results `15` to `25`.",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "orderBy",
            "description": "Order the results returned.",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "datePublished",
            "enum": ["datePublished", "lastModified", "seq"]
          },
          {
            "name": "orderDirection",
            "description": "Return the results in ascending or descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "DESC",
            "enum": ["ASC", "DESC"]
          },
          {
            "name": "isPublished",
            "description": "Filter returned issues by those that have been published. Pass a `false` value to return only unpublished issues. Only administrators and journal managers are allowed to access unpublished issues.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "volumes",
            "description": "Filter returned issues by those in a specific volume.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "numbers",
            "description": "Filter returned issues by those assigned a specific number.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "years",
            "description": "Filter returned issues by those in a specific year.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchPhrase",
            "description": "Filter the results by a search phrase matched against the title, description and year. It will also attempt to match search phrases using the localised issue identification. For example, in English a search for `Vol. 1 No. 2 (2018)` will match an issue with a volume of `1`, a number of `2` and a year of `2018`. The precise format differs for each language.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "List of issues.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IssueSummary"
              }
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The requested volume, number or year is not valid.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/issues/current": {
      "get": {
        "tags": ["Issues"],
        "summary": "Get the current issue.",
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The current issue.",
            "schema": {
              "$ref": "#/definitions/Issue"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "This journal does not have a current issue.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/issues/{issueId}": {
      "get": {
        "tags": ["Issues"],
        "summary": "Get an issue by ID.",
        "description": "If the issue has a custom section order, the `seq` property of each `SectionSummary` will reflect the sequence for that issue.",
        "parameters": [
          {
            "name": "issueId",
            "in": "path",
            "description": "Issue ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The requested issue.",
            "schema": {
              "$ref": "#/definitions/Issue"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested issue could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get a list of users.",
        "parameters": [
          {
            "name": "roleIds",
            "description": "Filter the results by those who have one of these user role IDs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "status",
            "description": "Filter results by active/disabled users.",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "active",
            "enum": ["active", "disabled", "all"]
          },
          {
            "name": "assignedToSubmission",
            "description": "Filter results by those assigned to this submission ID.",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "assignedToSubmissionStage",
            "description": "Filter results by those assigned to this submission stage. Will be ignored if no `assignedToSubmission` parameter exists.",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "assignedToSection",
            "description": "Filter the results by those assigned as section editors to this section ID.",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "description": "How many results to return in a single request. Max is `100`.",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20
          },
          {
            "name": "offset",
            "description": "Offset the results returned. Use this to receive subsequent pages of requests. A `count` of `10` and `offset` of `15` will return results `15` to `25`.",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "orderBy",
            "description": "Order the results returned. ",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "id",
            "enum": ["id", "familyName", "givenName"]
          },
          {
            "name": "orderDirection",
            "description": "Return the results in ascending or descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "DESC",
            "enum": ["ASC", "DESC"]
          },
          {
            "name": "searchPhrase",
            "description": "Filter the results by a search phrase matched against the `userName`, `givenName`, `familyName`, `email`, `affiliation`, `biography` and `orcid`.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "A list of users.",
            "schema": {
              "type": "object",
              "properties": {
                "itemsMax": {
                  "type": "integer"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UserSummary"
                  }
                }
              }
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "Only administrators, journal managers and editors are allowed to access users on this site.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get a user by ID.",
        "parameters": [
          {
            "name": "userId",
            "description": "User ID",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "User details.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/users/reviewers": {
      "get": {
        "tags": ["Users"],
        "summary": "Get a list of reviewers.",
        "parameters": [
          {
            "name": "status",
            "description": "Filter results by active/disabled users.",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "active",
            "enum": ["active", "disabled", "all"]
          },
          {
            "name": "reviewerRating",
            "description": "Filter results by those who have an average review assignment rating of at least `X` (valid ratings are between `1` and `5`).",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "reviewStage",
            "description": "Filter results by reviewers for one of the review stages in the workflow. Must be one of `WORKFLOW_STAGE_ID_INTERNAL_REVIEW` or `WORKFLOW_STAGE_ID_EXTERNAL_REVIEW`. In OJS, the review stage is `WORKFLOW_STAGE_ID_EXTERNAL_REVIEW`.",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "reviewsCompleted",
            "description": "Filter results by those who have completed at least `X` reviews. You can also pass a range as a string formatted as `X-X`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "reviewsActive",
            "description": "Filter results by those who have `X` review assignments currently in progress. You can also pass a range as a string formatted as `X-X`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "daysSinceLastAssignment",
            "description": "Filter results by those who's last review was assigned at least `X` days ago. You can also pass a range as a string formatted as `X-X`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "averageCompletion",
            "description": "Filter results by those who complete a review assignment within `X` days on average.",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "description": "How many results to return in a single request. Max is `100`.",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20
          },
          {
            "name": "offset",
            "description": "Offset the results returned. Use this to receive subsequent pages of requests. A `count` of `10` and `offset` of `15` will return results `15` to `25`.",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "orderBy",
            "description": "Order the results returned.",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "id",
            "enum": ["id", "familyName", "givenName"]
          },
          {
            "name": "orderDirection",
            "description": "Return the results in ascending or descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "DESC",
            "enum": ["ASC", "DESC"]
          },
          {
            "name": "searchPhrase",
            "description": "Filter the results by a search phrase matched against the `userName`, `givenName`, `familyName`, `email`, `affiliation`, `biography`, `orcid`, `interests`, and `gossip`.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "List of reviewers.",
            "schema": {
              "type": "object",
              "properties": {
                "itemsMax": {
                  "type": "integer"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ReviewerSummary"
                  }
                }
              }
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "Only administrators, journal managers and editors are allowed to access users on this site.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/contexts": {
      "get": {
        "tags": ["Contexts"],
        "summary": "Get a list of contexts.",
        "description": "Get an array of the journals (OJS), presses (OMP) or preprint servers (OPS) hosted on this site.",
        "parameters": [
          {
            "name": "isEnabled",
            "description": "Filter results by enabled/disabled contexts. Any truthy or falsey value will get enabled/disabled contexts. Leave this parameter out to get all contexts.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "count",
            "description": "How many results to return in a single request. Max is `100`.",
            "in": "query",
            "required": false,
            "type": "type",
            "default": 20
          },
          {
            "name": "offset",
            "description": "Offset the results returned. Use this to receive subsequent pages of requests.",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "searchPhrase",
            "description": "Filter results by a search phrase matched against the `name`, `description`, `acronym`, or `abbreviation`.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "List of contexts.",
            "schema": {
              "type": "object",
              "properties": {
                "itemsMax": {
                  "type": "integer"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ContextSummary"
                  }
                }
              }
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to view disabled contexts.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Contexts"],
        "summary": "Create a new context.",
        "description": "Create a new journal (OJS), press (OMP) or preprint server (OPS).",
        "parameters": [
          {
            "description": "Details about the context that should be created. The `path` field is required. The `name` is required in the site's primary locale.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ContextEditable"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Details of the context that was just added.",
            "schema": {
              "$ref": "#/definitions/Context"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          }
        }
      }
    },
    "/contexts/{contextId}": {
      "get": {
        "tags": ["Contexts"],
        "summary": "Get a context.",
        "parameters": [
          {
            "name": "contextId",
            "description": "Context ID",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Context details. Some details may be withheld if you are not a site admin or manager of that context.",
            "schema": {
              "$ref": "#/definitions/Context"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to view this context.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested context could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": ["Contexts"],
        "summary": "Edit a context.",
        "description": "Edit a journal (OJS), press (OMP) or preprint server (OPS).",
        "parameters": [
          {
            "name": "contextId",
            "description": "Context ID",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The details about a context that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ContextEditable"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The context that was just edited with the current values after the edit has occurred.",
            "schema": {
              "$ref": "#/definitions/Context"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "There are two possible conditions that will result in a `403` response. 1. You do not have permission to edit this context. 2. You submitted changes for one context from the API endpoint of another context. To edit a context, you must make a request to that context's API endpoint or the site-wide API endpoint.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested context could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["Contexts"],
        "summary": "Delete a context.",
        "description": "Delete a journal (OJS), press (OMP) or preprint server (OPS).",
        "parameters": [
          {
            "name": "contextId",
            "description": "Context ID",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Details of the context that was just deleted.",
            "schema": {
              "$ref": "#/definitions/Context"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to delete this context.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested context could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/contexts/{contextId}/theme": {
      "get": {
        "tags": ["Contexts"],
        "summary": "Get the active theme.",
        "description": "Get the active theme and theme options for any journal (OJS), press (OMP) or preprint server (OPS).",
        "parameters": [
          {
            "name": "contextId",
            "description": "Context ID",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The response will include the theme plugin directory in `themePluginPath`. Any theme options will be provided in additional keys based on the option name.",
            "schema": {
              "$ref": "#/definitions/ThemeOptions"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to view this context.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested context could not be found. A 404 may also be returned when a context has no active theme, or the active theme plugin has not been installed or enabled.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": ["Contexts"],
        "summary": "Edit the active theme.",
        "description": "Edit the active theme and theme options for any journal (OJS), press (OMP) or preprint server (OPS).",
        "parameters": [
          {
            "name": "contextId",
            "description": "Context ID",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The details you want to edit. The `themePluginPath` is required to specify the active theme, even if the theme is not being changed. Any additional keys/values must match the options defined by that theme.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ThemeOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The new theme and values for any of its theme options.",
            "schema": {
              "$ref": "#/definitions/ThemeOptions"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "There are two possible conditions that will result in a `403` response. 1. You do not have permission to edit this context. 2. You submitted changes for one context from the API endpoint of another context. To edit a context, you must make a request to that context's API endpoint or the site-wide API endpoint.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested context could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/site": {
      "get": {
        "tags": ["Site"],
        "summary": "Get the site.",
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Site settings.",
            "schema": {
              "$ref": "#/definitions/Site"
            }
          }
        }
      },
      "put": {
        "tags": ["Site"],
        "summary": "Edit the site.",
        "parameters": [
          {
            "description": "The details about the site that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SiteEditable"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The site details with the current values after the edit has occurred.",
            "schema": {
              "$ref": "#/definitions/Site"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          }
        }
      }
    },
    "/site/theme": {
      "get": {
        "tags": ["Site"],
        "summary": "Get the theme.",
        "description": "Get the active theme and theme options for the site.",
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The response will include the theme plugin directory in `themePluginPath`. Any theme options will be provided in additional keys based on the option name.",
            "schema": {
              "$ref": "#/definitions/ThemeOptions"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "Details about the active theme could not be found. This can occur when the active theme plugin is not installed or enabled.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": ["Site"],
        "summary": "Edit the theme.",
        "description": "Get the active theme and theme options for the site.",
        "parameters": [
          {
            "description": "The details you want to edit. The `themePluginPath` is required to specify the active theme, even if the theme is not being changed. Any additional keys/values must match the options defined by that theme.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ThemeOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The new theme and values for any of its theme options.",
            "schema": {
              "$ref": "#/definitions/ThemeOptions"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          }
        }
      }
    },
    "/announcements": {
      "get": {
        "tags": ["Announcements"],
        "summary": "Get a collection of announcements.",
        "parameters": [
          {
            "name": "count",
            "description": "How many results to return in a single request.",
            "in": "query",
            "required": false,
            "type": "type",
            "default": 20
          },
          {
            "name": "offset",
            "description": "Offset the results returned. Use this to receive subsequent pages of requests.",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "searchPhrase",
            "description": "Filter results by a search phrase matched against the `title`, `descriptionShort`, and `description`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "typeIds",
            "description": "Filter results by announcements of these announcement types.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "List of announcements.",
            "schema": {
              "type": "object",
              "properties": {
                "itemsMax": {
                  "type": "integer"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AnnouncementSummary"
                  }
                }
              }
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to view announcements in this context.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Announcements"],
        "summary": "Create a new announcement.",
        "description": "Create and publish a new announcement in this context.",
        "parameters": [
          {
            "description": "Details about the announcement that should be created.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AnnouncementEditable"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Details of the announcement that was just added.",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          }
        }
      }
    },
    "/announcements/{announcementId}": {
      "get": {
        "tags": ["Announcements"],
        "summary": "Get an announcement.",
        "parameters": [
          {
            "name": "announcementId",
            "description": "Announcement ID",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Announcement details.",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to view this announcement.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested announcement could not be found. Or you requested an announcement that is not part of this context.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": ["Announcements"],
        "summary": "Edit an announcement.",
        "description": "Edit an announcement.",
        "parameters": [
          {
            "name": "announcementId",
            "description": "Announcement ID",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The details about the announcement that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AnnouncementEditable"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The announcement that was just edited with the current values after the edit has occurred.",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to edit this announcement.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested announcement could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["Announcements"],
        "summary": "Delete an announcement.",
        "description": "Delete an announcement.",
        "parameters": [
          {
            "name": "announcementId",
            "description": "Announcement ID",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Details of the announcement that was just deleted.",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to delete this announcement.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested announcement could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/emailTemplates": {
      "get": {
        "tags": ["Email Templates"],
        "summary": "Get email templates.",
        "parameters": [
          {
            "name": "isEnabled",
            "description": "Filter results by enabled/disabled email templates. Any truthy or falsey value will get enabled/disabled email templates.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isCustom",
            "description": "Filter results by those with or without a default template. A truthy value will return only templates with a key that does not match one of the default templates. A falsey value will return only templates with a key that matches one of the default templates. Note that a default template may be customized, but this does not qualify for `isCustom`. Only completely custom templates, not a customization of a default template, will be returned when `isCustom` is `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromRoleIds",
            "description": "Filter results by email templates sent by one or more role IDs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "toRoleIds",
            "description": "Filter results by email templates received by one or more role IDs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "searchPhrase",
            "description": "Filter results by a search phrase matched against the `key`, `subject`, `body`, or `description`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "stageIds",
            "description": "Filter results by email templates that belong to one or more workflow stage IDs. Pass `0` to return templates not assigned to a stage.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "List of email templates.",
            "schema": {
              "type": "object",
              "properties": {
                "itemsMax": {
                  "type": "integer"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EmailTemplateSummary"
                  }
                }
              }
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to view email templates.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Email Templates"],
        "summary": "Create an email template.",
        "parameters": [
          {
            "description": "Details about the email template that should be created.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmailTemplateEditable"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Details of the email template that was just added.",
            "schema": {
              "$ref": "#/definitions/EmailTemplate"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          }
        }
      }
    },
    "/emailTemplates/{key}": {
      "get": {
        "tags": ["Email Templates"],
        "summary": "Get an email template by key.",
        "description": "Email templates are fetched by their key, rather than ID, so that a default template is retrieved if it has not been customized. See the [documentation](https://docs.pkp.sfu.ca/dev/documentation/en/email-templates).",
        "parameters": [
          {
            "name": "key",
            "description": "Email template key",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Email template details.",
            "schema": {
              "$ref": "#/definitions/EmailTemplate"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to view email templates.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested email template could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": ["Email Templates"],
        "summary": "Edit an email template.",
        "parameters": [
          {
            "name": "key",
            "description": "Email template key",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The details about the email template that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmailTemplateEditable"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The email template that was just edited with the current values after the edit has occurred.",
            "schema": {
              "$ref": "#/definitions/EmailTemplate"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "There are two possible conditions that will result in a `403` response. 1. You do not have permission to edit this email template. 2. You are an admin and you submitted changes for an email template in one context from the API endpoint of another context. To edit an email template, you must make a request to the API endpoint of that email template's context.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested email template could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["Email Templates"],
        "summary": "Delete an email template.",
        "description": "Default templates that have not been modified can not be deleted.",
        "parameters": [
          {
            "name": "key",
            "description": "Email template key",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "Details of the email template that was just deleted.",
            "schema": {
              "$ref": "#/definitions/EmailTemplate"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to delete this email template.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested email template could not be found. This will be returned if you try to delete a default email template that has not been modified.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/emailTemplates/restoreDefaults": {
      "delete": {
        "tags": ["Email Templates"],
        "summary": "Restore default email templates.",
        "description": "Delete custom templates and reset all templates to their default settings.",
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "A list of template keys which were deleted or reset.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/stats/editorial": {
      "get": {
        "tags": ["Stats / Editorial"],
        "summary": "Get editorial activity stats.",
        "description": "Returns information about editorial activity such as the number of submissions accepted and declined, the number of days to reach editorial decisions, and the acceptance and rejection rates.",
        "parameters": [
          {
            "name": "dateStart",
            "description": "Return stats after this date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateEnd",
            "description": "Return stats before this date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sectionIds",
            "description": "Filter results by submissions to these sections.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "An array containing the requested stats. The `name` may change with translation but the `key` will be a reliable, unique identifier for the statistic.",
            "schema": {
              "type": "array",
              "example": [
                {
                  "key": "submissionsReceived",
                  "name": "Submissions Received",
                  "value": 64
                },
                {
                  "key": "submissionsAccepted",
                  "name": "Submissions Accepted",
                  "value": 54
                },
                {
                  "key": "submissionsDeclined",
                  "name": "Submissions Declined",
                  "value": 4
                },
                {
                  "key": "submissionsDeclinedDeskReject",
                  "name": "Submissions Declined (Desk Reject)",
                  "value": 0
                },
                {
                  "key": "submissionsDeclinedPostReview",
                  "name": "Submissions Declined (After Review)",
                  "value": 4
                },
                {
                  "key": "submissionsPublished",
                  "name": "Submissions Published",
                  "value": 53
                },
                {
                  "key": "daysToDecision",
                  "name": "Days to First Editorial Decision",
                  "value": 42
                },
                {
                  "key": "daysToAccept",
                  "name": "Days to Accept",
                  "value": 123
                },
                {
                  "key": "daysToReject",
                  "name": "Days to Reject",
                  "value": 322
                },
                {
                  "key": "acceptanceRate",
                  "name": "Acceptance Rate",
                  "value": 0.84
                },
                {
                  "key": "declineRate",
                  "name": "Rejection Rate",
                  "value": 0.06
                },
                {
                  "key": "declinedDeskRate",
                  "name": "Desk Reject Rate",
                  "value": 0
                },
                {
                  "key": "declinedReviewRate",
                  "name": "After Review Reject Rate",
                  "value": 0.06
                }
              ]
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to access editorial statistics for this journal or press.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested resource was not found. This should only occur if the API is requested without specifying the context.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/stats/editorial/averages": {
      "get": {
        "tags": ["Stats / Editorial"],
        "summary": "Get yearly averages of editorial stats.",
        "description": "Returns yearly averages of editorial activity. To ensure averages are calculated fairly, partial years are not included in the averages. For example, if the first submission was received in October 2017 and the last submission was received in the current calendar year, only submissions from 2018 up until the end of the previous calendar year will be used to calculate the average.",
        "parameters": [
          {
            "name": "sectionIds",
            "description": "Filter results by submissions to these sections.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "An object containing the requested averages. Each property matches one of the properties from `/stats/editorial`. The value `-1` may be returned for a property if an average can not be calculated. This can occur if there is not a full calendar year of activity to average.",
            "schema": {
              "type": "array",
              "example": {
                "submissionsReceived": 32,
                "submissionsAccepted": 32,
                "submissionsDeclined": 32,
                "submissionsDeclinedDeskReject": 32,
                "submissionsDeclinedPostReview": 32,
                "submissionsPublished": 32
              }
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to access editorial statistics for this journal or press.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested resource was not found. This should only occur if the API is requested without specifying the context.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/stats/publications": {
      "get": {
        "tags": ["Stats / Publications"],
        "summary": "Get the views of a publication.",
        "description": "Returns a list of publications ordered by their total abstract views. Includes total views by abstract, all galleys, PDF galleys, HTML galleys and other galleys.",
        "parameters": [
          {
            "name": "dateStart",
            "description": "Return stats for publications after this date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateEnd",
            "description": "Return stats for publications before this date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sectionIds",
            "description": "Filter results by publications in these sections.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "submissionIds",
            "description": "Filter results by these submissions.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "searchPhrase",
            "description": "Filter results by publications that match this search phrase. Searches the same submission properties as the `searchPhrase` parameter in the `/submissions` endpoint.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "count",
            "description": "How many publications to return in a single request. Max is `100`.",
            "in": "query",
            "required": false,
            "type": "type",
            "default": 30
          },
          {
            "name": "offset",
            "description": "Offset the publications returned. Use this to receive subsequent pages of requests.",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "orderDirection",
            "description": "Return the results in ascending or descending order.",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": "DESC",
            "enum": ["ASC", "DESC"]
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "A list of publications with their total stats during the requested period.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicationStats"
              }
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to access statistics for this journal or press.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested resource was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/stats/publications/abstract": {
      "get": {
        "tags": ["Stats / Publications"],
        "summary": "Get abstract views by day or month.",
        "description": "Returns a monthly or daily timeline of abstract views for the publications which match the request parameters.",
        "parameters": [
          {
            "name": "timelineInterval",
            "description": "Return the total daily or monthly views",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "month",
            "enum": ["day", "month"]
          },
          {
            "name": "dateStart",
            "description": "Return stats for publications after this date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateEnd",
            "description": "Return stats for publications before this date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sectionIds",
            "description": "Filter results by publications in these sections.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "submissionIds",
            "description": "Filter results by these submissions.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "searchPhrase",
            "description": "Filter results by publications that match this search phrase. Searches the same submission properties as the `searchPhrase` parameter in the `/submissions` endpoint.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "A list of days or months with the total stats for that day or month.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimelineInterval"
              }
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to access statistics for this journal or press.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested resource was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/stats/publications/galley": {
      "get": {
        "tags": ["Stats / Publications"],
        "summary": "Get galley views by day or month.",
        "description": "Returns a monthly or daily timeline of galley views for the publications which match the request parameters.",
        "parameters": [
          {
            "name": "timelineInterval",
            "description": "Return the total daily or monthly views.",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "month",
            "enum": ["day", "month"]
          },
          {
            "name": "dateStart",
            "description": "Return stats for publications after this date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateEnd",
            "description": "Return stats for publications before this date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sectionIds",
            "description": "Filter results by publications in these sections.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "submissionIds",
            "description": "Filter results by these publications.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "searchPhrase",
            "description": "Filter results by publications that match this search phrase. Searches the same submission properties as the `searchPhrase` parameter in the `/submissions` endpoint.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "A list of days or months with the total stats for that day or month.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimelineInterval"
              }
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to access statistics for this journal or press.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested resource was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/stats/publications/{submissionId}": {
      "get": {
        "tags": ["Stats / Publications"],
        "summary": "Get one publication's views by type.",
        "description": "Returns a publication's total views by abstract, all galleys, PDF galleys, HTML galleys and other galleys.",
        "parameters": [
          {
            "name": "dateStart",
            "description": "Return stats for publications after this date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateEnd",
            "description": "Return stats for publications before this date.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The total stats for the publication during the period requested.",
            "schema": {
              "$ref": "#/definitions/PublicationStats"
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to access statistics for this journal or press.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested resource was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/stats/publications/{submissionId}/abstract": {
      "get": {
        "tags": ["Stats / Publications"],
        "summary": "Get onne publication's abstract views by day or month.",
        "description": "Returns a monthly or daily timeline of abstract views for the requested publication.",
        "parameters": [
          {
            "name": "timelineInterval",
            "description": "Return the total daily or monthly views",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "month",
            "enum": ["day", "month"]
          },
          {
            "name": "dateStart",
            "description": "Return stats for publications after this date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateEnd",
            "description": "Return stats for publications before this date.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "A list of days or months with the total stats for that day or month.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimelineInterval"
              }
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to access statistics for this journal or press.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested resource was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/stats/publications/{submissionId}/galley": {
      "get": {
        "tags": ["Stats / Publications"],
        "summary": "Get one publication's galley views by day or month.",
        "description": "Returns a monthly or daily timeline of galley views for the requested publication.",
        "parameters": [
          {
            "name": "timelineInterval",
            "description": "Return the total daily or monthly views.",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "month",
            "enum": ["day", "month"]
          },
          {
            "name": "dateStart",
            "description": "Return stats for publications after this date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateEnd",
            "description": "Return stats for publications before this date.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "A list of days or months with the total stats for that day or month.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimelineInterval"
              }
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to access statistics for this journal or press.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested resource was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/stats/users": {
      "get": {
        "tags": ["Stats / Users"],
        "summary": "Get user statistics.",
        "description": "Returns a count of the number of user registrations broken down by roles.\n\nPlease note when using the `registeredBefore` and `registeredAfter` parameters that role counts reflect current user roles.\n\nA user who registered as an author in January, 2019 but was later appointed to subeditor will be counted as a subeditor when the registration date range includes January, 2019.",
        "parameters": [
          {
            "name": "registeredAfter",
            "description": "Return counts reflecting users who registered after this date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "registeredBefore",
            "description": "Return counts reflecting users who registered before this date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "Count `active` or `disabled` users. Default: `active`.",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "active",
            "enum": ["active", "disabled"]
          }
        ],
        "responses": {
          "200": {
            "description": "An object containing the requested stats. The `id` relects the `ROLE_ID_*` constant in the application.",
            "schema": {
              "type": "array",
              "example": [
                {
                  "id": "total",
                  "name": "Total",
                  "value": 304
                },
                {
                  "id": 16,
                  "name": "Journal Manager",
                  "value": 4
                },
                {
                  "id": 17,
                  "name": "Section Editor",
                  "value": 14
                },
                {
                  "id": 4097,
                  "name": "Assistant",
                  "value": 1
                },
                {
                  "id": 65536,
                  "name": "Author",
                  "value": 220
                },
                {
                  "id": 4096,
                  "name": "Reviewer",
                  "value": 107
                },
                {
                  "id": 1048576,
                  "name": "Reader",
                  "value": 207
                },
                {
                  "id": 2097152,
                  "name": "Subscription Manager",
                  "value": 0
                }
              ]
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to access user statistics for this journal or press.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The requested resource was not found. This should only occur if the API is requested without specifying the context.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/vocabs": {
      "get": {
        "tags": ["Vocabs"],
        "summary": "Get controlled vocab entries.",
        "parameters": [
          {
            "name": "vocab",
            "description": "The type of controlled vocab you want to retrieve entries for. One of `CONTROLLED_VOCAB_*`.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "locale",
            "description": "The locale key, such as `en_US`, you want to retrieve entries for. If no `locale` is provided, entries will be provided in the user's current locale or fall back to the journal's primary locale.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "A list of the entries available in this journal.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The `locale` that you requested is not supported in this journal.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "x-summary": "Request Not Found",
            "description": "The journal you requested could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/temporaryFiles": {
      "options": {
        "tags": ["Temporary Files"],
        "summary": "Get headers for file uploads.",
        "description": "Responds with the appopriate headers to indicate file uploads maybe be sent, required by some file upload utilities which send a preflight request.",
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "An empty response body."
          }
        }
      },
      "post": {
        "tags": ["Temporary Files"],
        "summary": "Upload a file.",
        "description": "Upload a file to the temporary file storage area and receive a temporary file ID.",
        "parameters": [
          {
            "name": "...",
            "description": "Use any parameter key to upload your file. The API endpoint will retrieve the first uploaded file.",
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The temporary file ID to use in other API requests.",
            "schema": {
              "type": "object",
              "properties": {
                "documentType": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "mimetype": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "No uploaded file could be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/_payments": {
      "put": {
        "tags": ["Backend"],
        "summary": "Save payment settings.",
        "description": "This endpoint is used on the settings page to save payment plugin settings alongside the general journal settings for enabling payments and setting the currency.",
        "parameters": [
          {
            "description": "None of these properties are required. In addition to `paymentsEnabled` and `currency`, you may pass any property that corresponds with a setting for an enabled `paymethod` plugin.",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "paymentsEnabled": {
                  "type": "boolean"
                },
                "currency": {
                  "type": "string"
                },
                "...": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "The parameters you submitted"
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
            "schema": {
              "$ref": "#/definitions/InvalidParametersResponse"
            }
          }
        }
      }
    },
    "/_uploadPublicFile": {
      "options": {
        "tags": ["Backend"],
        "summary": "Get headers for file uploads.",
        "description": "Responds with the appopriate headers to indicate file uploads maybe be sent, required by some file upload utilities which send a preflight request.",
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "An empty response body."
          }
        }
      },
      "post": {
        "tags": ["Backend"],
        "summary": "Upload a file.",
        "description": "The user's public file directory supports files uploaded through the TinyMCE rich text editor. This is commonly used in context settings but is also available to all registered users through their profile biography.",
        "parameters": [
          {
            "name": "file",
            "description": "Use the `file` key to upload your file.",
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "An object containing the URL to the uploaded file.",
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "x-summary": "Request Invalid",
            "description": "One of the following errors occurred.\n* No uploaded file could be found.\n* This file type is not supported.\n* The file you uploaded identifies itself as an image but it is not a valid image.\n* The mime-type did not match the file extension.\n* The file is too large.\n* The server configuration could not support this file upload because there is no temporary directory, it doesn't have permission to write to the directory, or a PHP extension stopped the file upload.\n\nThe error message will contain further details.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "x-summary": "Request Unauthorized",
            "description": "You do not have permission to upload this public file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "The upload failed for an unknown reason.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "413": {
            "description": "Your user file directory is full.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "The server is unable to read or write to the public files directory.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/_submissions": {
      "get": {
        "tags": ["Backend"],
        "summary": "Get submissions.",
        "description": "This endpoint delivers a little bit of extra information about each submission that is used in the submissions list. This private endpoint saves a few extra HTTP requests, but it is more database-intensive for each query.",
        "parameters": [
          {
            "description": "Accepts most parameters supported by the public `/submissions` endpoint."
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "List of submissions."
          }
        }
      }
    }
  }
}
